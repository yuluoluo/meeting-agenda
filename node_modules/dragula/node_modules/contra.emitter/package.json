{
  "name": "contra.emitter",
  "description": "A sane event emitter component",
  "version": "1.1.1",
  "homepage": "https://github.com/bevacqua/contra.emitter",
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "ng@bevacqua.io",
    "url": "http://bevacqua.io"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/bevacqua/contra.emitter.git"
  },
  "keywords": [
    "async",
    "a",
    "asynchronous",
    "flow",
    "control",
    "promises",
    "q",
    "generator",
    "contra"
  ],
  "devDependencies": {
    "assert": "~1.1.0",
    "gulp": "^3.6.2",
    "gulp-bump": "~0.1.0",
    "gulp-clean": "~0.2.3",
    "gulp-concat": "~2.1.7",
    "gulp-git": "~0.2.0",
    "gulp-header": "^1.0.2",
    "gulp-jshint": "~1.3.4",
    "gulp-mocha": "~0.3.0",
    "gulp-rename": "~0.2.2",
    "gulp-size": "~0.1.1",
    "gulp-uglify": "~0.1.0",
    "jshint": "~2.4.1",
    "jshint-stylish": "~0.1.5",
    "jshint-tap": "0.0.1",
    "mocha": "~1.17.0"
  },
  "readme": "![contra.png][logo]\n\n> A sane event emitter component\n\nThis is the event emitter found in [`contra`][1].\n\n# Install\n\nInstall using `npm` or `bower`. Or get the [source code][3] and embed that in a `<script>` tag.\n\n```shell\nnpm i contra.emitter --save\n```\n\n```shell\nbower i contra.emitter --save\n```\n\nYou can use it as a Common.JS module, or embed it directly in your HTML.\n\n```js\nvar emitter = require('contra.emitter');\n```\n\n```html\n<script src='contra.emitter.js'></script>\n<script>\nvar λ = contra;\nvar emitter = λ.emitter;\n</script>\n```\n\n## `λ.emitter(thing={}, options={})`\n\nAugments `thing` with the event emitter methods listed below. If `thing` isn't provided, an event emitter is created for you. Emitter methods return the `thing` for chaining.\n\n- `thing` Optional. Writable JavaScript object\n- `emit(type, ...arguments)` Emits an event of type `type`, passing any `...arguments`\n- `emitterSnapshot(type)` Returns a function you can call, passing any `...arguments`\n- `on(type, fn)` Registers an event listener `fn` for `type` events\n- `once(type, fn)` Same as `on`, but the listener is discarded after one callback\n- `off(type, fn)` Unregisters an event listener `fn` from `type` events\n- `off(type)` Unregisters all event listeners from `type` events\n- `off()` Unregisters all event listeners\n\nThe `emitterSnapshot(type)` method lets you remove all event listeners before emitting an event that might add more event listeners which shouldn't be removed. In the example below, `thing` removes all events and then emits a `'destroy'` event, resulting in a `'create'` event handler being attached. If we just used `thing.off()` after emitting the destroy event, the `'create'` event handler would be wiped out too _(or the consumer would have to know implementation details as to avoid this issue)_.\n\n```js\nvar thing = λ.emitter();\n\nthing.on('foo', foo);\nthing.on('bar', bar);\nthing.on('destroy', function () {\n  thing.on('create', reinitialize);\n});\n\nvar destroy = thing.emitterSnapshot('destroy');\nthing.off();\ndestroy();\n```\n\nThe emitter can be configured with the following options, too.\n\n- `async` Debounce listeners asynchronously. By default they're executed in sequence.\n- `throws` Throw an exception if an `error` event is emitted and no listeners are defined. Defaults to `true`.\n\n```js\nvar thing = λ.emitter(); // also, λ.emitter({ foo: 'bar' })\n\nthing.once('something', function (level) {\n  console.log('something FIRST TROLL');\n});\n\nthing.on('something', function (level) {\n  console.log('something level ' + level);\n});\n\nthing.emit('something', 4);\nthing.emit('something', 5);\n// <- 'something FIRST TROLL'\n// <- 'something level 4'\n// <- 'something level 5'\n```\n\nReturns `thing`.\n\nEvents of type `error` have a special behavior. `λ.emitter` will throw if there are no `error` listeners when an error event is emitted. This behavior can be turned off setting `throws: false` in the options.\n\n```js\nvar thing = { foo: 'bar' };\n\nλ.emitter(thing);\n\nthing.emit('error', 'foo');\n<- throws 'foo'\n```\n\nIf an `'error'` listener is registered, then it'll work just like any other event type.\n\n```js\nvar thing = { foo: 'bar' };\n\nλ.emitter(thing);\n\nthing.on('error', function (err) {\n  console.log(err);\n});\n\nthing.emit('error', 'foo');\n<- 'foo'\n```\n\n# License\n\nMIT\n\n  [logo]: https://raw.github.com/bevacqua/contra/master/resources/contra.png\n  [1]: https://github.com/bevacqua/contra\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bevacqua/contra.emitter/issues"
  },
  "_id": "contra.emitter@1.1.1",
  "dist": {
    "shasum": "99dc1a88703532f9142ec5eaf03815ae56fd8f0b"
  },
  "_from": "contra.emitter@^1.1.0",
  "_resolved": "https://registry.npmjs.org/contra.emitter/-/contra.emitter-1.1.1.tgz"
}
