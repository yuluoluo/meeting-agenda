{
  "name": "dragula",
  "version": "1.6.0",
  "description": "Drag and drop so simple it hurts",
  "main": "dragula.js",
  "scripts": {
    "start": "watchify -s dragula -do dist/dragula.js dragula.js & stylus -w dragula.styl --import node_modules/nib -o dist",
    "scripts": "jshint . && browserify -s dragula -do dist/dragula.js dragula.js && uglifyjs -m -c -o dist/dragula.min.js dist/dragula.js",
    "styles": "stylus dragula.styl --import node_modules/nib -o dist && cleancss dist/dragula.css -o dist/dragula.min.css",
    "build": "npm run scripts && npm run styles",
    "deployment": "git add dist && npm version ${BUMP:-\"patch\"} --no-git-tag-version && git add package.json && git commit -am \"Autogenerated pre-deployment commit\" && bower version ${BUMP:-\"patch\"} && git reset HEAD~2 && git add . && git commit -am \"Release $(cat package.json | jq -r .version)\" && git push --tags && npm publish && git push",
    "sync": "git checkout gh-pages ; git merge master ; git push ; git checkout master",
    "deploy": "npm run build && npm run deployment && npm run sync"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bevacqua/dragula.git"
  },
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "nicolasbevacqua@gmail.com",
    "url": "http://bevacqua.io/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bevacqua/dragula/issues"
  },
  "homepage": "https://github.com/bevacqua/dragula",
  "dependencies": {
    "contra.emitter": "^1.1.0",
    "crossvent": "^1.3.1"
  },
  "devDependencies": {
    "browserify": "8.1.0",
    "clean-css": "3.0.4",
    "jshint": "2.5.11",
    "nib": "^1.1.0",
    "stylus": "0.49.3",
    "uglify-js": "2.4.16",
    "watchify": "2.2.1"
  },
  "readme": "# Dragula\n\n> Drag and drop so simple it hurts\n\nBrowser support includes every sane browser and **IE7+**. <sub>_(Granted you polyfill the functional `Array` methods in ES5)_</sub>\n\n# Demo\n\n[![demo.png][1]][2]\n\n# Inspiration\n\nHave you ever wanted a drag and drop library that just works? That doesn't just depend on bloated frameworks, that has great support? That actually understands where to place the elements when they are dropped? That doesn't need you to do a zillion things to get it to work? Well, so did I!\n\n# Features\n\n- Super easy to set up\n- No bloated dependencies\n- **Figures out sort order** on its own\n- A shadow where the item would be dropped offers **visual feedback**\n- Touch events!\n\n# Install\n\nYou can get it on npm.\n\n```shell\nnpm install dragula --save\n```\n\nOr bower, too. <sub>_(note that it's called `dragula.js` in bower)_</sub>\n\n```shell\nbower install dragula.js --save\n```\n\n# Usage\n\nDragula provides the easiest possible API to make drag and drop a breeze in your applications.\n\n## `dragula(containers, options?)`\n\nBy default, `dragula` will allow the user to drag an element in any of the `containers` and drop it in any other container in the list. If the element is dropped anywhere that's not one of the `containers`, the event will be gracefully cancelled according to the `revertOnSpill` and `removeOnSpill` options.\n\nNote that dragging is only triggered on left clicks, and only if no meta keys are pressed. Clicks on buttons and anchor tags are ignored, too.\n\nThe example below allows the user to drag elements from `left` into `right`, and from `right` into `left`.\n\n```js\ndragula([document.querySelector('#left'), document.querySelector('#right')]);\n```\n\nYou can also provide an `options` object. Here's an overview.\n\n```js\ndragula(containers, {\n  moves: function (el, container, handle) {\n    return true;         // elements are always draggable by default\n  },\n  accepts: function (el, target, source, sibling) {\n    return true;         // elements can be dropped in any of the `containers` by default\n  },\n  direction: 'vertical', // Y axis is considered when determining where an element would be dropped\n  copy: false,           // elements are moved by default, not copied\n  revertOnSpill: false,  // spilling will put the element back where it was dragged from, if this is true\n  removeOnSpill: false   // spilling will `.remove` the element, if this is true\n});\n```\n\nThe options are detailed below.\n\n#### `options.moves`\n\nYou can define a `moves` method which will be invoked with `(el, container, handle)` whenever an element is clicked. If this method returns `false`, a drag event won't begin, and the event won't be prevented either. The `handle` element will be the original click target, which comes in handy to test if that element is an expected _\"drag handle\"_.\n\n#### `options.accepts`\n\nYou can set `accepts` to a method with the following signature: `(el, target, source, sibling)`. It'll be called to make sure that an element `el`, that came from container `source`, can be dropped on container `target` before a `sibling` element. The `sibling` can be `null`, which would mean that the element would be placed as the last element in the container. Note that if `options.copy` is set to `true`, `el` will be set to the copy, instead of the originally dragged element.\n\nAlso note that **the position where a drag starts is always going to be a valid place where to drop the element**, even if `accepts` returned `false` for all cases.\n\n#### `options.copy`\n\nIf `copy` is set to `true`, items will be copied rather than moved. This implies the following differences:\n\nEvent     | Move                                     | Copy\n----------|------------------------------------------|---------------------------------------------\n`drag`    | Element will be concealed from `source`  | Nothing happens\n`drop`    | Element will be moved into `target`      | Element will be cloned into `target`\n`remove`  | Element will be removed from DOM         | Nothing happens\n`cancel`  | Element will stay in `source`            | Nothing happens\n\n#### `options.revertOnSpill`\n\nBy default, spilling an element outside of any containers will move the element back to the _drop position previewed by the feedback shadow_. Setting `revertOnSpill` to `true` will ensure elements dropped outside of any approved containers are moved back to the source element where the drag event began, rather than stay at the _drop position previewed by the feedback shadow_.\n\n#### `options.removeOnSpill`\n\nBy default, spilling an element outside of any containers will move the element back to the _drop position previewed by the feedback shadow_. Setting `removeOnSpill` to `true` will ensure elements dropped outside of any approved containers are removed from the DOM. Note that `remove` events won't fire if `copy` is set to `true`.\n\n#### `options.direction`\n\nWhen an element is dropped onto a container, it'll be placed near the point where the mouse was released. If the `direction` is `'vertical'`, the default value, the Y axis will be considered. Otherwise, if the `direction` is `'horizontal'`, the X axis will be considered.\n\n## API\n\nThe `dragula` method returns a tiny object with a concise API. We'll refer to the API returned by `dragula` as `drake`.\n\n#### `drake.addContainer(container)`\n\nAdds a `container` to the `containers` collection. It can be a single DOM element or an array.\n\n#### `drake.removeContainer(container)`\n\nRemoves a `container` from the `containers` collection. It can be a single DOM element or an array.\n\n#### `drake.dragging`\n\nThis property will be `true` whenever an element is being dragged.\n\n#### `drake.start(item)`\n\nEnter drag mode **without a shadow**. This method is most useful when providing complementary keyboard shortcuts to an existing drag and drop solution. Even though a shadow won't be created at first, the user will get one as soon as they click on `item` and start dragging it around. Note that if they click and drag something else, `.end` will be called before picking up the new item.\n\n#### `drake.end()`\n\nGracefully end the drag event as if using **the last position marked by the preview shadow** as the drop target. The proper `cancel` or `drop` event will be fired, depending on whether the item was dropped back where it was originally lifted from _(which is essentially a no-op that's treated as a `cancel` event)_.\n\n#### `drake.cancel(revert)`\n\nIf an element managed by `drake` is currently being dragged, this method will gracefully cancel the drag action. You can also pass in `revert` at the method invocation level, effectively producing the same result as if `revertOnSpill` was `true`.\n\nNote that **a _\"cancellation\"_ will result in a `cancel` event** only in the following scenarios.\n\n- `revertOnSpill` is `true`\n- Drop target _(as previewed by the feedback shadow)_ is the source container **and** the item is dropped in the same position where it was originally dragged from\n\n#### `drake.remove()`\n\nIf an element managed by `drake` is currently being dragged, this method will gracefully remove it from the DOM.\n\n#### `drake.on` _(Events)_\n\nThe `drake` is an event emitter. The following events can be tracked using `drake.on(type, listener)`:\n\nEvent Name | Listener Arguments      | Event Description\n-----------|-------------------------|-------------------------------------------------------------------------------------\n`drag`     | `el, container`         | `el` was lifted from `container`\n`dragend`  | `el`                    | Dragging event for `el` ended with either `cancel`, `remove`, or `drop`\n`drop`     | `el, container, source` | `el` was dropped into `container`, and originally came from `source`\n`cancel`   | `el, container`         | `el` was being dragged but it got nowhere and went back into `container`, its last stable parent\n`remove`   | `el, container`         | `el` was being dragged but it got nowhere and it was removed from the DOM. Its last stable parent was `container`.\n`shadow`   | `el, container`         | `el`, _the visual aid shadow_, was moved into `container`. May trigger many times as the position of `el` changes, even within the same `container`\n`cloned`   | `clone, original`       | DOM element `original` was cloned as `clone`. Triggers for mirror images and when `copy: true`\n\n#### `drake.destroy()`\n\nRemoves all drag and drop events used by `dragula` to manage drag and drop between the `containers`. If `.destroy` is called while an element is being dragged, the drag will be effectively cancelled.\n\n# License\n\nMIT\n\n[![eyes.png][3]][4]\n\n[1]: https://github.com/bevacqua/dragula/blob/master/resources/demo.png\n[2]: http://bevacqua.github.io/dragula/\n[3]: https://github.com/bevacqua/dragula/blob/master/resources/eyes.png\n[4]: https://www.youtube.com/watch?v=EqQuihD0hoI\n",
  "readmeFilename": "readme.markdown",
  "_id": "dragula@1.6.0",
  "dist": {
    "shasum": "c366911eeaf0c838ca4f9f983c7411ff0c7e9472"
  },
  "_from": "dragula@",
  "_resolved": "https://registry.npmjs.org/dragula/-/dragula-1.6.0.tgz"
}
